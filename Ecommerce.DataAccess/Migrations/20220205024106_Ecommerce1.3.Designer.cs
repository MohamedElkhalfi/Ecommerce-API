// <auto-generated />
using System;
using Ecommerce.DataAccess.ConnexionDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ecommerce.DataAccess.Migrations
{
    [DbContext(typeof(EcommerceContext))]
    [Migration("20220205024106_Ecommerce1.3")]
    partial class Ecommerce13
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Ecommerce")
                .HasAnnotation("EcommerceVersion", "1.1")
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ecommerce.DataAccess.Model.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Photo");

                    b.HasKey("ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Ecommerce.DataAccess.Model.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Username")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("ID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Ecommerce.DataAccess.Model.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<int?>("clientID");

                    b.HasKey("ID");

                    b.HasIndex("clientID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Ecommerce.DataAccess.Model.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Order_ID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<int?>("Product_ID");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(6, 2)");

                    b.HasKey("ID");

                    b.HasIndex("Order_ID");

                    b.HasIndex("Product_ID");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Ecommerce.DataAccess.Model.Product", b =>
                {
                    b.Property<int>("ID");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("Is_Available")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Is_Promotion")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Is_Selected")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PhotoName");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(6, 2)");

                    b.HasKey("ID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Ecommerce.DataAccess.Model.Order", b =>
                {
                    b.HasOne("Ecommerce.DataAccess.Model.Client", "client")
                        .WithMany("Order_")
                        .HasForeignKey("clientID");
                });

            modelBuilder.Entity("Ecommerce.DataAccess.Model.OrderItem", b =>
                {
                    b.HasOne("Ecommerce.DataAccess.Model.Order", "Order_")
                        .WithMany("OrderItem_")
                        .HasForeignKey("Order_ID");

                    b.HasOne("Ecommerce.DataAccess.Model.Product", "Product_")
                        .WithMany()
                        .HasForeignKey("Product_ID");
                });

            modelBuilder.Entity("Ecommerce.DataAccess.Model.Product", b =>
                {
                    b.HasOne("Ecommerce.DataAccess.Model.Category", "Category_")
                        .WithMany("Product_")
                        .HasForeignKey("ID")
                        .HasConstraintName("FK_Product_Category")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
